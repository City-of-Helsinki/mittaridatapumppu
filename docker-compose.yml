# mittaridatapumppu-deviceregistry

version: '3.8'

services:

  endpoint:
    image: ghcr.io/city-of-helsinki/mittaridatapumppu-endpoint:latest
    build: ./mittaridatapumppu-endpoint
    ports:
      - "8001:8000"
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./mittaridatapumppu-endpoint:/home/app
      - ./fvhiot-python/fvhiot:/home/app/fvhiot
    environment:
      ENDPOINT_CONFIG_URL: "http://deviceregistry:8000/api/v1/hosts/localhost/"
      DEVICE_REGISTRY_TOKEN: "abcdef1234567890abcdef1234567890abcdef12"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      UVICORN_LOG_LEVEL: "debug"
      UVICORN_RELOAD: "true"
      DEBUG: 1

  parser-digita:
    image: ghcr.io/city-of-helsinki/mittaridatapumppu-parser:latest
    build: ./mittaridatapumppu-parser
    container_name: parser
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./fvhiot-python/fvhiot:/home/app/fvhiot
    environment:
      # Kafka client config
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "digita_dev"
      # Parser config
      DEVICE_REGISTRY_URL: "http://deviceregistry:8000/api/v1"
      DEVICE_REGISTRY_ENDPOINTS_URL: "http://deviceregistry:8000/api/v1/hosts/localhost/"
      DEVICE_REGISTRY_TOKEN: abcdef1234567890abcdef1234567890abcdef12
      # Debug config
      DEBUG: 1

  persister-influxdb:
    image: ghcr.io/city-of-helsinki/mittaridatapumppu-persister:latest
    build: ./mittaridatapumppu-persister
    container_name: persister-influxdb
    depends_on:
      kafka:
        condition: service_healthy
#      influxdb2:
#        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./fvhiot-python/fvhiot:/home/app/fvhiot
    environment:
      # Kafka client config
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "digita_dev"
      KAFKA_PARSED_DATA_TOPIC_NAME: "digita.parseddata"
      KAFKA_RAW_DATA_TOPIC_NAME: "digita.rawdata"
      # Persister config
      DEVICE_REGISTRY_URL: "http://deviceregistry:8000/api/v1"
      DEVICE_REGISTRY_TOKEN: abcdef1234567890abcdef1234567890abcdef12
      # InfluxDB config
      INFLUX_HOST: "http://influxdb2:8086"
      INFLUX_ORG: "Development"
      INFLUX_BUCKET: "devbucket"
      INFLUX_TOKEN: "insercure-token-for-development-and-testing-purposes-only-KxU4jAU23H3vTk"
      # Debug config
      DEBUG: 1

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      # Kafka KRaft settings
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
      # Listeners
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
    healthcheck:
      interval: 10s
      retries: 3
      test: kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --describe
      timeout: 5s

  deviceregistry:
    image: ghcr.io/city-of-helsinki/mittaridatapumppu-deviceregistry:latest
    build: .
    container_name: deviceregistry
    volumes:
      - ./mittaridatapumppu-deviceregistry:/home/app
      - media:/media
    ports:
      - "8000:8000"
    environment:
      # Device registry config
      DJANGO_SETTINGS_MODULE: "deviceregistry.settings"
      ALLOWED_HOSTS:
      SECRET_KEY:
      # PostgreSQL config
      DJANGO_DB_HOST:
      DJANGO_DB_NAME:
      DJANGO_DB_USER:
      DJANGO_DB_PASSWORD:
      DJANGO_DB_PORT:
      # Debug config
      UVICORN_LOG_LEVEL: "debug"
      UVICORN_RELOAD: "true"
      DEBUG: 1
      # UVICORN_RELOAD: true
      # UVICORN_LOG_LEVEL: true
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgis/postgis:16-3.4
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: "pg_isready -U postgres -d postgres"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  influxdb2:
    image: influxdb:2.7
    ports:
      - "18086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: root
      DOCKER_INFLUXDB_INIT_PASSWORD: ruutruut
      DOCKER_INFLUXDB_INIT_ORG: Development
      DOCKER_INFLUXDB_INIT_BUCKET: devbucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "insercure-token-for-development-and-testing-purposes-only-KxU4jAU23H3vTk"
    healthcheck:
      test: ["CMD", "curl", "influxdb2:18086/api/v2/ping"]
      interval: 1m
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  media:
  kafka_data:
